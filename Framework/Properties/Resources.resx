<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CantReleaseNonCapturedContactException" xml:space="preserve">
    <value>The Contact with and id of {0} couldn't be released because it isn't captured.</value>
  </data>
  <data name="ContactAlreadyCapturedException" xml:space="preserve">
    <value>The Contact with an Id of {0} is already captured by the UIController.</value>
  </data>
  <data name="HitTestDetailsMustBeTypeofException" xml:space="preserve">
    <value>The IHitTestDetails supplied: {0} were not of type {1} as is required by {2}.</value>
  </data>
  <data name="UpdateCannotBeCalledDuringUpdate" xml:space="preserve">
    <value>Update cannot be called while Update is executing.</value>
  </data>
  <data name="MaximumQueueSizeReached" xml:space="preserve">
    <value>The maximum size for the controller queue {0} contact events was reached.</value>
    <comment>This will occur if an application isn't calling UIController.Update when contacts are being received by the queue.  It is thrown to prevent the system from running out of resources and crashing.</comment>
  </data>
  <data name="StateMachineMustBeOfType" xml:space="preserve">
    <value>The StateMachine provided was of type {0}, but must be of type {0}.  This could be because the contact is already captured to type {1}.</value>
  </data>
  <data name="CalledCapturedHitTestInformationForReleasedElement" xml:space="preserve">
    <value>The method SetCapturedHitTestInformation was called on a HitTestResult which was not captured. Call SetUncapturedHitTestInformation instead.</value>
  </data>
  <data name="CalledReleaseHitTestInformationForCapturedElement" xml:space="preserve">
    <value>The method SetUncapturedHitTestInformation was called on a HitTestResult which was captured. Call SetCapturedHitTestInformation instead.</value>
  </data>
  <data name="ControllerSetToADifferentController" xml:space="preserve">
    <value>The Controller property on IInputElementStateMachine {0} is set to a different UIController then it was hit tested to.</value>
  </data>
  <data name="ContactIsAlreadyInCollectionException" xml:space="preserve">
    <value>The Contact {0} is already in the collection {1}</value>
  </data>
  <data name="ContactIsNotInCollectionException" xml:space="preserve">
    <value>The Contact {0} is not in the collection {1}</value>
  </data>
  <data name="SizeFToStringFormat" xml:space="preserve">
    <value>Width={0}, Height={1}</value>
    <comment>{0} is the width, {1} is the height</comment>
  </data>
  <data name="PointFToStringFormat" xml:space="preserve">
    <value>X={0}, Y={1}</value>
    <comment>{0} is the X position {1} is the Y position</comment>
  </data>
  <data name="VectorToStringFormat" xml:space="preserve">
    <value>X={0}, Y={1}</value>
    <comment>{0} is the X offest, {1} is the Y offset</comment>
  </data>
  <data name="InvalidOrientationArgumentException" xml:space="preserve">
    <value>The orientation {0} is not valid for property {1}.</value>
  </data>
  <data name="ItemIsAlreadyInCollection" xml:space="preserve">
    <value>The item is already in this collection or another collection</value>
  </data>
  <data name="ItemNotInCollection" xml:space="preserve">
    <value>The item provided is not in the ListBoxStateMachine's {0} collection.</value>
  </data>
</root>